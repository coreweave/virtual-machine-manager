Add-Type -AssemblyName System.Windows.Forms
[System.Windows.Forms.Application]::EnableVisualStyles()

$Form                            = New-Object system.Windows.Forms.Form
#$Form.AutoSize                   = $true
$Form.AutoSizeMode               = 'GrowAndShrink'
$Form.ClientSize                 = '800,720'
$Form.Anchor = 'Top,Bottom,Left,Right'
$Form.text                       = "CoreWeave Virtual Machine Manager"
$Form.TopMost                    = $false
#$Form.MaximizeBox                = $false
$Form.StartPosition = 'CenterScreen'

$iconBase64      = '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' 
$iconBytes       = [Convert]::FromBase64String($iconBase64)
$stream  = New-Object IO.MemoryStream($iconBytes, 0, $iconBytes.Length)
$stream.Write($iconBytes, 0, $iconBytes.Length);
$iconImage       = [System.Drawing.Image]::FromStream($stream, $true)
$Form.Icon       = [System.Drawing.Icon]::FromHandle((New-Object System.Drawing.Bitmap -Argument $stream).GetHIcon())

$PictureBox1     = New-Object system.Windows.Forms.PictureBox
$PictureBox1.width       = 300
$PictureBox1.height      = 50
$PictureBox1.location    = New-Object System.Drawing.Point(250,0)
#We are encoding CoreWeave marketing assets as Basse64 to embed into the script
$base64ImageString = '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SiV/D4WOnozuDkBEREREREREREREQaptEup5f3ksyKpJHlAwRFpXUFAre69vh4/Do7yNXEMSKE9Ht4aooBpqQZOPQERERERERERERETBqm0SylpIEu/JAwpLXg31xTfrKGA8GkxU1WtCUytsA+iC77aG5n0f5FVsRERERERERERERBSsWiehxv3liQKshoqcSHqlfWmzjQJaOLFhq5PggU2gzKqHGsN3W8M0E86CIiIiIiIiIiIiIgpcrZNQ1mKCDXhKHlCYTPKoc+JUdgkF2GooX7ONmppA8dbWUOQqq6CIiIiIiIiIiIiIwlf7JJSthsoSNKq1GR1BklwsWg31ZHRrAMezjVRwvakJFB9tDW21WivDAEREREREREREREQUvNonoazn/eWhCe4PQTFrn/gFrqEoh9VQNoGykMkGGuzp6E7faVtDzVgFRURERERERERERFQTjUhCWSYJxRkxsROsn/78Lz0UMJvVNIQLkSRQVMVJZaJNbj0Z3R2AiIiIiIiIiIiIiGqhMUmovBoKehMUNZHWFRTUcpBEiSmB4iqRt6V6GURERERERERERERUG41JQlmaiG0FNgFFSwS9otVQebWSarmVdZrFValXcltD874OvhvduQciIiIiIiIiIiIiqo1GJaGe95fHClwHRU2S1g0U1MKJjfISmtn92NrI2WooKbEyMc2E7TaJiIiIiIiIiIiIaqZRSShrMcEGq6HiZt7/zj998e+XUMB4NJioaikJzZamhb6Xukr1xKUyrkVbBRXDLC0iIiIiIiIiIiKipmlcEmrcX55AwaqJyKWSXGlf2myjgKejO7a94xgFxJxAKSORZ19/VkERERERERERERER1VPjklDWsy+XN1QwBMWsfeJUVrgCSVUu4IiYQCne1jATXGcVFBEREREREREREVE9NTIJZZkklE0ejEHxSpIrpz/b7KAAO9vI/DDEEajIzdgTKLYayrwQl3EENon37NHtDRARERERERERERFRLTU2CfW8vzzOEpzjfKi4Sat4NZRJohy6mskmUJ4+utUH4cno1gBHSeRpxjZ8RERERERERERERDXW2CSUZRNR5m94DqyIilYi0kVBthpKoDcP9T9iAmWvQyfy9OGT0d0BiIiIiIiIiIiIiKi2Gp2Esp71l0cZE1FUUKpJf96qOlsFxQTKXodta9jSZB1EREREREREREREVGuNT0JZtiJqMcGKHraahWpPE9lECexsJ1W9Ps/vTVXOgV7TUrkwz+8TwSD2WVpERERERERERERETRBFEsoa95cn3/3bf18Xk4wCq6KikQlKa4vXwomNg6qhmEB5u/x1UX3n+2Ff3zST0t4zIiIiIiIiIiIiIqpONEmoHbY933/+2/Jykrfo0/ugxhLFhXwuWEnGo8Ek1fTc2xJRtg0fEyjvZhN55ofRW3+DyGUm8YiIiIiIiIiIiIiaQRC5dn+z/Qugt5VlvQTSVUXHBMI/ANXSNEGkX0si/af95SEc6HQ/6WxL1jdf7UM1HyHzz7ciMmhlLzbGo3tzzY2K3dnuJ+sqesn89Lf2PVPznrW0dWk8+vMIRERERERERERERNQI/x+5MG0krAqCgAAAAABJRU5ErkJggg=='
$imageBytes = [Convert]::FromBase64String($base64ImageString)
$ms = New-Object IO.MemoryStream($imageBytes, 0, $imageBytes.Length)
$ms.Write($imageBytes, 0, $imageBytes.Length);
$logo = [System.Drawing.Image]::FromStream($ms, $true)
$PictureBox1.image = $logo
$PictureBox1.SizeMode    = [System.Windows.Forms.PictureBoxSizeMode]::Zoom
$PictureBox1.Anchor      = 'Top,Left,Right'
$PictureBox1.add_Click({Start-Process "https://cloud.coreweave.com"})

$dataGridView                        = New-Object System.Windows.Forms.DataGridView
$dataGridView.text                   = "dataGridView"
$dataGridView.width                  = 800
$dataGridView.height                 = 600
$dataGridView.location               = New-Object System.Drawing.Point(0,60)
$dataGridView.AutoSizeColumnsMode    = 'Fill'
$dataGridView.AutoSizeRowsMode       = 'None'
$DataGridView.AllowUserToResizeColumns = $true
$DataGridView.AllowUserToResizeRows = $true
$dataGridView.SelectionMode          = 'RowHeaderSelect'
$dataGridView.EditMode               = 'EditProgrammatically'
$dataGridView.Anchor                 = 'Top,Left,Right,Bottom'
$dataGridView.MultiSelect            = $true
$dataGridView.Add_RowsAdded({ $dataGridView.Rows | %{ $_.HeaderCell.Value = ($_.Index +1).ToString();$datagridview.AutoResizeRowHeadersWidth(($_.Index),'AutoSizeToDisplayedHeaders')} })
$dataGridView.add_MouseDown({
    $sender = $args[0]
    [System.Windows.Forms.MouseEventArgs]$e= $args[1]

    if ($e.Button -eq  [System.Windows.Forms.MouseButtons]::Right)
    {
        [System.Windows.Forms.DataGridView+HitTestInfo] $hit = $dataGridView.HitTest($e.X, $e.Y);
        if ($hit.Type -eq [System.Windows.Forms.DataGridViewHitTestType]::Cell)
        {
            $dataGridView.CurrentCell = $dataGridView[$hit.ColumnIndex, $hit.RowIndex];
            $contextMenuStrip1.Show($dataGridView, $e.X, $e.Y);
        }

    }
})

$contextMenuStrip1=New-Object System.Windows.Forms.ContextMenuStrip
[System.Windows.Forms.ToolStripItem]$toolStripItem1 = New-Object System.Windows.Forms.ToolStripMenuItem
$toolStripItem1.Text = "Start VM"
[System.Windows.Forms.ToolStripItem]$toolStripItem2 = New-Object System.Windows.Forms.ToolStripMenuItem
$toolStripItem2.Text = "Stop VM"
[System.Windows.Forms.ToolStripItem]$toolStripItem3 = New-Object System.Windows.Forms.ToolStripMenuItem
$toolStripItem3.Text = "Restart VM"
[System.Windows.Forms.ToolStripItem]$toolStripItem4 = New-Object System.Windows.Forms.ToolStripMenuItem
$toolStripItem4.Text = "Delete VM"
[System.Windows.Forms.ToolStripItem]$toolStripItem5 = New-Object System.Windows.Forms.ToolStripMenuItem
$toolStripItem5.Text = "Edit VM"
[System.Windows.Forms.ToolStripItem]$toolStripItem6 = New-Object System.Windows.Forms.ToolStripMenuItem
$toolStripItem6.Text = "Connect via SSH"
[System.Windows.Forms.ToolStripItem]$toolStripItem7 = New-Object System.Windows.Forms.ToolStripMenuItem
$toolStripItem7.Text = "Connect via RDP"
[System.Windows.Forms.ToolStripItem]$toolStripItem8 = New-Object System.Windows.Forms.ToolStripMenuItem
$toolStripItem8.Text = "Connect via VNC"
[System.Windows.Forms.ToolStripItem]$toolStripItem9 = New-Object System.Windows.Forms.ToolStripMenuItem
$toolStripItem9.Text = "Connect via Console"
$contextMenuStrip1.Items.AddRange(@($toolStripItem1,$toolStripItem2,$toolStripItem3,$toolStripItem4,$toolStripItem5,$toolStripItem6,$toolStripItem7,$toolStripItem8,$toolStripItem9))

$ComboBox1                       = New-Object system.Windows.Forms.ComboBox
$ComboBox1.width                 = 200
$ComboBox1.height                = 20
$ComboBox1.AutoSize = $true
$ComboBox1.text                  = "Select action to invoke"
$ListItems = @('Load Virtual Machines','Change Namespace','Load Kubeconfig','Update Binaries','Export List to CSV','Deploy Virtual Server')
$ListItems | ForEach-Object {[void] $ComboBox1.Items.Add($_)}
$ComboBox1.location              = New-Object System.Drawing.Point(170,690)
$ComboBox1.Anchor                = 'Bottom,Left'
$ComboBox1.Font                  = 'Microsoft Sans Serif,10'
$ComboBox1.DropDownStyle         = 'DropDownList'

$CheckBox1                       = New-Object system.Windows.Forms.CheckBox
$CheckBox1.text                  = "Use Internal IP"
$CheckBox1.AutoSize              = $false
$CheckBox1.width                 = 200
$CheckBox1.height                = 20
$CheckBox1.Anchor                = 'Left,bottom'
$CheckBox1.location              = New-Object System.Drawing.Point(170,660)
$CheckBox1.Font                  = 'Microsoft Sans Serif,10'
$CheckBox1.CheckState = 'Unchecked'

$Button1                         = New-Object system.Windows.Forms.Button
$Button1.text                    = "Execute `n Selected Task"
$Button1.width                   = 147
$Button1.height                  = 40
$Button1.location                = New-Object System.Drawing.Point(10,670)
$Button1.Anchor                  = 'Bottom,Left'
$Button1.Font                    = 'Microsoft Sans Serif,10'

$Button2                         = New-Object system.Windows.Forms.Button
$Button2.text                    = "Load`nVirtual Machines"
$Button2.width                   = 147
$Button2.height                  = 40
$Button2.location                = New-Object System.Drawing.Point(640,670)
$Button2.Anchor                  = 'Bottom,Right'
$Button2.Font                    = 'Microsoft Sans Serif,10'

$Form.controls.AddRange(@($dataGridView,$Button1,$ComboBox1,$Button2,$PictureBox1,$CheckBox1))

$Button1.Add_Click(
    {
        if($ComboBox1.SelectedItem -eq $ListItems[0]){$Button2.PerformClick()}
        
        if($ComboBox1.SelectedItem -eq $ListItems[1])
            {
                $Form1                            = New-Object system.Windows.Forms.Form
                #$Form.AutoSize                   = $true
                $Form1.AutoSizeMode               = 'GrowAndShrink'
                $Form1.ClientSize                 = '300,80'
                $Form1.Anchor = 'Top,Bottom,Left,Right'
                $Form1.text                       = "Set Namespace"
                $Form1.TopMost                    = $true
                $Form1.MaximizeBox                = $false
                $Form1.StartPosition = 'CenterScreen'
                $Form1.MinimizeBox = $false
                $Form1.FormBorderStyle = 'FixedSingle'
                $Form1.Icon = $Form.Icon

                $TextBox1                        = New-Object system.Windows.Forms.TextBox
                $TextBox1.multiline              = $false
                $TextBox1.width                  = 300
                $TextBox1.height                 = 25
                $TextBox1.location               = New-Object System.Drawing.Point(0,10)
                $TextBox1.Font                   = 'Microsoft Sans Serif,10'
                $TextBox1.Autosize               = $false
                $TextBox1.Text = $global:Namespace
                $TextBox1.TextAlign = 'Center'
                $TextBox1.Anchor = 'Top,Bottom,Left,Right'

                $Button3                         = New-Object system.Windows.Forms.Button
                $Button3.text                    = "OK"
                $Button3.width                   = 40
                $Button3.height                  = 30
                $Button3.location                = New-Object System.Drawing.Point(130,50)
                $Button3.Anchor                  = 'Bottom,Left,Right'
                $Button3.Font                    = 'Microsoft Sans Serif,10'
                $Button3.Add_Click(
                    {
                        $global:Namespace = $TextBox1.Text
                        $Button2.PerformClick()
                        [void]$Form1.Close()
                    })

                $Form1.controls.AddRange(@($TextBox1,$Button3))

                [void]$Form1.ShowDialog()
            }
        if($ComboBox1.SelectedItem -eq $ListItems[2])
            {
                Load-KubeConfig
                $Button2.PerformClick()
            }
        if($ComboBox1.SelectedItem -eq $ListItems[3])
            {
                if(!(test-path $env:ProgramData\k8s -ErrorAction SilentlyContinue)){New-Item -Path $env:ProgramData -Name k8s -ItemType Directory -Force | out-null}
                Invoke-WebRequest -UseBasicParsing -Uri "https://dl.k8s.io/release/$(Invoke-RestMethod -Uri "https://dl.k8s.io/release/stable.txt")/bin/windows/amd64/kubectl.exe" -OutFile $env:ProgramData\k8s\kubectl.exe
                Invoke-WebRequest -Uri $((Invoke-restmethod https://api.github.com/repos/kubevirt/kubevirt/releases/latest).assets.browser_download_url.Where({$_ -like '*virtctl-*-windows-amd64.exe'}))  -OutFile $env:ProgramData\k8s\virtctl.exe
            }

        if($ComboBox1.SelectedItem -eq $ListItems[4])
            {
                if(!($Table)){$Button2.PerformClick()}
                $SaveFileDialog = New-Object System.Windows.Forms.SaveFileDialog
                $SaveFileDialog.initialDirectory = $($env:USERPROFILE + '\Documents')
                $SaveFileDialog.filter = "Comma Separated Value File (*.csv) | *.csv|All files (*.*)|*.*"
                $SaveFileDialog.FileName = "$($global:Namespace+'_VDI_'+((get-date).tofiletime()))"
                $SaveFileDialog.CheckPathExists = $true
                [void]$SaveFileDialog.ShowDialog()
                if($SaveFileDialog.FileName  -match [regex]::Escape('\'))
                    {
                        $Table | Export-Csv -NoTypeInformation -Path $SaveFileDialog.FileName -Force
                        Invoke-Item  $(Split-Path -Parent  $SaveFileDialog.FileName)
                    }
            }
        if($ComboBox1.SelectedItem -eq $ListItems[5])
            {
                Deploy-VS
            }

        Elseif(!($ComboBox1.SelectedItem)){[System.Windows.Forms.MessageBox]::Show("Please select an item from the list box.",'Selection Error','OK','Error')}
    })

$Button2.Add_Click(
    {
        $Data = (iex "$env:ProgramData\k8s\kubectl.exe get vm -o json -n $global:Namespace" -ErrorVariable LookupErr) | convertfrom-json
        if(!($LookupErr))
            {
                $SvcData = (iex "$env:ProgramData\k8s\kubectl.exe get svc -o json -n $global:Namespace" |convertfrom-json)
                $global:Table = New-Object system.Data.DataTable "VirtualMachines"
                $Table.Columns.Add("Name","System.String") | out-null
                $Table.Columns.Add("InternalIP","System.String") | out-null
                $Table.Columns.Add("IP","System.String") | out-null
                $Table.Columns.Add("Reigon","System.String") | out-null
                $Table.Columns.Add("GPU","System.String") | out-null
                $Table.Columns.Add("Cores","System.Int32") | out-null
                $Table.Columns.Add("RAM","System.String") | out-null
                $Table.Columns.Add("Storage","System.String") | out-null
                $Table.Columns.Add("CreationTime","System.DateTime") | out-null
                $Table.Columns.Add("Running","System.Boolean") | out-null
                $Table.Columns.Add("Namespace","System.String") | out-null

                foreach($Row in $Data.Items)
	                {
		                $NewRow = $Table.NewRow()
                        $Svc = $SvcData.items | Where {$_.metadata.name -eq $($row.metadata.name+'-tcp')}
		                $NewRow.Name = $Row.metadata.name
                        if($svc.spec.selector){$NewRow.InternalIP = $svc.spec.clusterIP}
                        Else{$NewRow.InternalIP = $svc.status.loadbalancer.ingress.ip}
		                $NewRow.IP = $svc.status.loadbalancer.ingress.ip
		                $NewRow.Reigon = $Row.spec.template.spec.nodeselector.'topology.kubernetes.io/region'
		                $NewRow.GPU = $Row.spec.template.spec.nodeselector.'gpu.nvidia.com/model'
		                $NewRow.Cores = [int]$Row.spec.template.spec.domain.cpu.cores
		                $NewRow.RAM = $Row.spec.template.spec.domain.resources.requests.memory
		                $NewRow.Storage = $Row.spec.datavolumetemplates.spec.pvc.resources.requests.storage
                        $NewRow.CreationTime = [DateTime]$(get-date $($Row.metadata.creationtimestamp) -Format 'MM/dd/yyy hh:mmtt')
                        $NewRow.Running = $Row.status.conditions.status
                        $NewRow.Namespace = $Row.metadata.namespace
		                $Table.Rows.Add($NewRow)
	                }

                $DataGridView.DataSource = $table
                $dataGridView.columns[1].Visible = $false
                $datagridview.columns[9].SortMode = 'Automatic'
                $DataGridView.AutoResizeColumns()
                $DataGridView.Refresh()
            }

        Else{[System.Windows.Forms.MessageBox]::Show("$($LookupErr.Exception)",'Unhandled Exception','OK','Error')}
    })

$toolStripItem1.add_Click({Invoke-k8ctl -Action 'start'})

$toolStripItem2.add_Click({Invoke-k8ctl -Action 'stop'})

$toolStripItem3.add_Click({Invoke-k8ctl -Action 'restart'})

$toolStripItem4.add_Click({Invoke-k8ctl -Action 'delete'})

$toolStripItem5.add_Click(
    {
        foreach($vm in $dataGridView.SelectedCells.OwningRow.Cells.Where{$_.ColumnIndex -eq 0}.Value)
            {
                $vs = (iex "$env:ProgramData\k8s\kubectl.exe get vs $($vm) -n $global:Namespace -o json" -ErrorVariable stderr -ErrorAction SilentlyContinue) | ConvertFrom-Json -ErrorAction SilentlyContinue
                if($stderr){[System.Windows.Forms.MessageBox]::Show("$($stderr)",'CoreWeave Virtual Machine Manager','OK','Error');rv stderr}
                Else{Deploy-VS -Edit:$true -InputObject $vs}
            }
    })

$toolStripItem6.add_Click(
    {
        if(!((Get-WindowsCapability -Online -Name OpenSSH.Client*).State -eq 'Installed'))
            {
                switch([System.Windows.Forms.MessageBox]::Show("Windows OpenSSH Client is not enabled.`nWould you like to enable it now?",'OpenSSH Client','YesNo','Warning'))
                    {
                        'Yes'{Get-WindowsCapability -Online -Name OpenSSH.Client* | Add-WindowsCapability -Online | Out-Null}
                        'No'{[System.Windows.Forms.MessageBox]::Show("Unable to connect.",'OpenSSH Client','OK','Error')}
                    }
            }

        if($CheckBox1.CheckState -eq 'Checked'){$Index = 1}
        Else{$Index = 2}
        $dataGridView.SelectedCells.OwningRow.Cells.Where{$_.ColumnIndex -eq $Index}.Value | %{Start-Process -FilePath "powershell.exe" -ArgumentList "-noprofile -nologo -command ""`$user = Read-Host -Prompt 'Enter your UserName';ssh -o StrictHostKeychecking=no `$user@$_""" -PassThru}
    })

$toolStripItem7.add_Click(
    {
        if($CheckBox1.CheckState -eq 'Checked'){$Index = 1}
        Else{$Index = 2}
        $dataGridView.SelectedCells.OwningRow.Cells.Where{$_.ColumnIndex -eq $Index}.Value | %{Start-Process -PassThru -ArgumentList "/v:$_" -FilePath mstsc.exe}
    })

$toolStripItem8.add_Click({Invoke-k8ctl -Action 'VNC'})

$toolStripItem9.add_Click({Invoke-k8ctl -Action 'console'})

function Invoke-k8ctl
    {
        Param([String]$Action)
        
        if($Action -eq 'VNC')
            {
                #$dataGridView.SelectedCells.OwningRow.Cells.Where{$_.ColumnIndex -eq 0}.Value | %{Start-Process -FilePath $env:ProgramData\k8s\virtctl.exe -ArgumentList "vnc $_ -n $($global:Namespace) --proxy-only" -PassThru}
                foreach ($Value in $dataGridView.SelectedCells.OwningRow.Cells.Where{$_.ColumnIndex -eq 0}.Value)
                    {
                        $PInfoVar =
                            @{
                                'FileName' = "$env:ProgramData\k8s\virtctl.exe"
                                'RedirectStandardOutput' = $true
                                'UseShellExecute' = $false
                                'CreateNoWindow' = $true
                                'WindowStyle' = 'Hidden'
                                'Arguments' = "vnc $Value -n $($global:Namespace) --proxy-only"
                            }

                        $PInfo = New-Object System.Diagnostics.ProcessStartInfo -Property $PInfoVar
                        $P = New-Object System.Diagnostics.Process -Property @{'StartInfo' = $PInfo}
                        [void]$P.Start()
                        $Out = $p.StandardOutput.ReadLine()
                        switch([System.Windows.Forms.MessageBox]::Show("$($Value) can now be accessed via VNC at address localhost:$(($out | convertfrom-json).port)`n`nSelect OK to close the VNC connection proxy.",'VNC Connection','OK','Information'))
                            {
                                'OK'
                                    {$P.Kill()}
                            }
                    }
            }

        Elseif($Action -eq 'console'){$dataGridView.SelectedCells.OwningRow.Cells.Where{$_.ColumnIndex -eq 0}.Value | %{Start-Process -FilePath powershell -ArgumentList "-noprofile -nologo -Command ""& $env:ProgramData\k8s\virtctl.exe $Action $_ -n $($global:Namespace)""" -PassThru}}

        Elseif($Action -eq 'delete')
            {
                switch([System.Windows.Forms.MessageBox]::Show("This action will delete:`n`n$($dataGridView.SelectedCells.OwningRow.Cells.Where{$_.ColumnIndex -eq 0}.Value.ForEach({$_+[System.Environment]::NewLine}))`nAre you sure you want to perform this action?",'CoreWeave Virtual Machine Manager','YesNo','Warning'))
                    {
                        'Yes'
                            {
                                $stdout = @()
                                $Delete = @()
                                $dataGridView.SelectedCells.OwningRow.Cells.Where{$_.ColumnIndex -eq 0}.Value | %{($Stdout += iex "$env:ProgramData\k8s\kubectl.exe $Action vs $($_) -n $global:Namespace");($Stdout += iex "$env:ProgramData\k8s\kubectl.exe $Action vm $($_) -n $global:Namespace")}
                                if($stdout | select-string -Pattern Error){[System.Windows.Forms.MessageBox]::Show("$($stdout.ForEach({$_+[System.Environment]::NewLine+[System.Environment]::NewLine}))",'CoreWeave Virtual Machine Manager','OK','Error')}
                                Else{[System.Windows.Forms.MessageBox]::Show("$($stdout.ForEach({$_+[System.Environment]::NewLine+[System.Environment]::NewLine})+'Load Virtual Machines again to check status.')",'CoreWeave Virtual Machine Manager','OK','Information')}
                                rv stdout,delete
                            }
                    }
            }
        
        Else
            {
                $stdout = @()
                $dataGridView.SelectedCells.OwningRow.Cells.Where{$_.ColumnIndex -eq 0}.Value | %{($Stdout += iex "$env:ProgramData\k8s\virtctl.exe $Action $($_) -n $global:Namespace")}
                if($stdout | select-string -Pattern Error){[System.Windows.Forms.MessageBox]::Show("$($stdout.ForEach({$_+[System.Environment]::NewLine+[System.Environment]::NewLine}))",'CoreWeave Virtual Machine Manager','OK','Error')}
                Else{[System.Windows.Forms.MessageBox]::Show("$($stdout.ForEach({$_+[System.Environment]::NewLine+[System.Environment]::NewLine})+'Load Virtual Machines again to check status.')",'CoreWeave Virtual Machine Manager','OK','Information')}
                rv stdout
            }
    }

function Load-KubeConfig
    {
        $OpenFileDialog = New-Object System.Windows.Forms.OpenFileDialog
        $OpenFileDialog.initialDirectory = $($env:USERPROFILE + '\Downloads')
        $OpenFileDialog.filter = "Kubeconfig (cw-kubeconfig*) | cw-kubeconfig*|All files (*.*)|*.*"
        $OpenFileDialog.ValidateNames = 'cw-kubeconfig'
        [void]$OpenFileDialog.ShowDialog()

        if($OpenFileDialog.FileName)
            {
                if(!(test-path $env:userprofile\.kube)){New-Item -ItemType Directory -Path $env:userprofile -Name .kube -Force | out-null}
                if(test-path $env:userprofile\.kube\config -ErrorAction SilentlyContinue)
                    {
                        switch([System.Windows.Forms.MessageBox]::Show("$env:userprofile\.kube\config will be re-named.`nSelect 'Yes' to confirm.",'Configuration File','YesNo','Warning'))
                            {
                                'Yes'
                                    {
                                        Rename-Item -Path "$env:userprofile\.kube\config" -NewName "config.$((get-date).ToFileTime())" -Force
                                        Copy-Item $OpenFileDialog.FileName -Destination $env:userprofile\.kube\config -Force
                                    }
                                'No'{[System.Windows.Forms.MessageBox]::Show("Not using selected configuration file.",'Configuration File','OK','Warning')}
                            }
                    }
                Else{Move-Item $OpenFileDialog.FileName -Destination $env:userprofile\.kube\config -Force}

                $global:Namespace = (gc $env:userprofile\.kube\config | select-string Namespace).ToString().Substring(15)
            }
    }

if(!(test-path $env:userprofile\.kube\config -ErrorAction SilentlyContinue))
    {
        switch([System.Windows.Forms.MessageBox]::Show($This,"Kubeconfig not found.`nWould you like to import a config file?",'Configuration File','YesNo','Warning'))
            {
                'Yes'{Load-KubeConfig}

                'No'{[System.Windows.Forms.MessageBox]::Show("No configuration file detected.`nNo data will be loaded.",'Configuration File','OK','Error')}
            }
    }

if(!(test-path $env:ProgramData\k8s\kubectl.exe -ErrorAction SilentlyContinue))
    {
        switch([System.Windows.Forms.MessageBox]::Show("Kubectl binary not detected.`nWould you like to download now?",'Kubectl','YesNo','Warning'))
            {
                'Yes'
                    {
                        if(!(test-path $env:ProgramData\k8s -ErrorAction SilentlyContinue)){New-Item -Path $env:ProgramData -Name k8s -ItemType Directory -Force | out-null}
                        Invoke-WebRequest -UseBasicParsing -Uri "https://dl.k8s.io/release/$(Invoke-RestMethod -Uri "https://dl.k8s.io/release/stable.txt")/bin/windows/amd64/kubectl.exe" -OutFile $env:ProgramData\k8s\kubectl.exe
                    }
                'No'{[System.Windows.Forms.MessageBox]::Show("Data cannot be loaded without Kubectl.",'Kubectl','OK','Error')}
            }
    }

if(!(test-path $env:ProgramData\k8s\virtctl.exe -ErrorAction SilentlyContinue))
    {
        switch([System.Windows.Forms.MessageBox]::Show("Virtctl binary not detected.`nWould you like to download now?",'Virtctl','YesNo','Warning'))
            {
                'Yes'
                    {
                        if(!(test-path $env:ProgramData\k8s -ErrorAction SilentlyContinue)){New-Item -Path $env:ProgramData -Name k8s -ItemType Directory -Force | out-null}
                        Invoke-WebRequest -Uri $((Invoke-restmethod https://api.github.com/repos/kubevirt/kubevirt/releases/latest).assets.browser_download_url.Where({$_ -like '*virtctl-*-windows-amd64.exe'}))  -OutFile $env:ProgramData\k8s\virtctl.exe
                    }
                'No'{[System.Windows.Forms.MessageBox]::Show("Virtual Machines cannot be controlled without Virtctl.",'Virtctl','OK','Error')}
            }
    }

$global:Namespace = (gc $env:userprofile\.kube\config | select-string Namespace).ToString().Substring(15)

[bool]$IsInternal = (gcim msft_Netipaddress -namespace root/StandardCimv2 -Property IPAddress -Filter "InterfaceAlias like 'Ethernet%' and AddressFamily = 2").IPAddress -match '^(10\.135\.(?:1(?:9[2-9])|2(?:0[0-7]))\.(?:[0-9]|[1-9][0-9]|1(?:[0-9][0-9])|2(?:[0-4][0-9]|5[0-5])))$|^(10\.135\.(?:2(?:0[8-9]|1[0-9]|2[0-3]))\.(?:[0-9]|[1-9][0-9]|1(?:[0-9][0-9])|2(?:[0-4][0-9]|5[0-5])))$|^(10\.(?:1(?:4[0-3]))\.(?:[0-9]|[1-9][0-9]|1(?:[0-9][0-9])|2(?:[0-4][0-9]|5[0-5]))\.(?:[0-9]|[1-9][0-9]|1(?:[0-9][0-9])|2(?:[0-4][0-9]|5[0-5])))$|^(10\.(?:1(?:4[4-9]|5[0-9]))\.(?:[0-9]|[1-9][0-9]|1(?:[0-9][0-9])|2(?:[0-4][0-9]|5[0-5]))\.(?:[0-9]|[1-9][0-9]|1(?:[0-9][0-9])|2(?:[0-4][0-9]|5[0-5])))$'
if($IsInternal){$CheckBox1.CheckState = 'Checked'}

[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls -bor [Net.SecurityProtocolType]::Tls11 -bor [Net.SecurityProtocolType]::Tls12

Function Deploy-VS
{
Param
    (
        [switch]$Edit,
        [PSCustomObject]$InputObject
    )

#Add-Type -AssemblyName System.Windows.Forms
#[System.Windows.Forms.Application]::EnableVisualStyles()

if(!(test-path $env:APPDATA\CoreWeave\VMM\Labels.dat -ErrorAction SilentlyContinue))
    {
        switch([System.Windows.Forms.MessageBox]::Show("No cached data found for hardware types.`nWould you like to cache data now?",'Hardware Cache','YesNo','Warning'))
            {
                'Yes'
                    {
                        if(!(test-path $env:APPDATA\CoreWeave\VMM -ErrorAction SilentlyContinue)){New-Item -ItemType Directory -Path $env:APPDATA\CoreWeave\VMM -Force | out-null}
                        (iex "$env:ProgramData\k8s\kubectl.exe get nodes -o=custom-columns=GPU:.metadata.labels.gpu\.nvidia\.com/model,Hypervisor:.metadata.labels.node\.coreweave\.cloud/hypervisor,Class:.metadata.labels.node\.coreweave\.cloud/class,CPU:.metadata.labels.node\.coreweave\.cloud/cpu,REIGON:metadata.labels.topology\.kubernetes\.io\/region --server-print=false") -replace '\s{2,}',',' |convertfrom-csv | where {$_.Hypervisor -eq 'true' -and $_.GPU -notlike 'Geforce*'} | sort * -Unique | Export-Clixml -Path $env:APPDATA\CoreWeave\VMM\Labels.dat
                        $global:HW = Import-Clixml $env:APPDATA\CoreWeave\VMM\Labels.dat
                    }

                'No'
                    {
                        [System.Windows.Forms.MessageBox]::Show("No hardware types available to display.",'Hardware Cache','OK','Error')
                    }
            }
    }

Elseif((gci $env:APPDATA\CoreWeave\VMM\Labels.dat).LastAccessTime -le (get-date).AddDays(-7))
    {
        switch([System.Windows.Forms.MessageBox]::Show("Cached hardware types looks a bit old.`nWould you like to update now?",'Hardware Cache','YesNo','Warning'))
            {
                'Yes'
                    {
                        if(!(test-path $env:APPDATA\CoreWeave\VMM -ErrorAction SilentlyContinue)){New-Item -ItemType Directory -Path $env:APPDATA\CoreWeave\VMM -Force | out-null}
                        (iex "$env:ProgramData\k8s\kubectl.exe get nodes -o=custom-columns=GPU:.metadata.labels.gpu\.nvidia\.com/model,Hypervisor:.metadata.labels.node\.coreweave\.cloud/hypervisor,Class:.metadata.labels.node\.coreweave\.cloud/class,CPU:.metadata.labels.node\.coreweave\.cloud/cpu,REIGON:metadata.labels.topology\.kubernetes\.io\/region --server-print=false") -replace '\s{2,}',',' |convertfrom-csv | where {$_.Hypervisor -eq 'true' -and $_.GPU -notlike 'Geforce*'} | sort * -Unique | Export-Clixml -Path $env:APPDATA\CoreWeave\VMM\Labels.dat
                        $global:HW = Import-Clixml $env:APPDATA\CoreWeave\VMM\Labels.dat
                    }

                'No'{$global:HW = Import-Clixml $env:APPDATA\CoreWeave\VMM\Labels.dat}
            }
    }

Else{$global:HW = Import-Clixml $env:APPDATA\CoreWeave\VMM\Labels.dat}

if(!($Edit)){$pvc = (iex "$env:ProgramData\k8s\kubectl.exe get pvc -n vd-images -l images.coreweave.cloud/latest=true,images.coreweave.cloud/private=false --sort-by=.spec.storageClassName -o json") |convertfrom-json}

$private = (iex "$env:ProgramData\k8s\kubectl.exe get pvc -n $global:Namespace -o json") | convertfrom-json

$Form                            = New-Object system.Windows.Forms.Form
$Form.ClientSize                 = New-Object System.Drawing.Point(515,850)
$Form.text                       = "Virtual Machine Editor"
$Form.TopMost                    = $false
$Form.StartPosition = 'CenterScreen'
$form.AutoScaleMode = 'Font'
$Form.AutoSizeMode = "GrowAndShrink"
$Form.MaximumSize = $Form.ClientSize
$Form.MinimumSize = $Form.ClientSize
$Form.MaximizeBox = $false
$stream  = New-Object IO.MemoryStream($iconBytes, 0, $iconBytes.Length)
$stream.Write($iconBytes, 0, $iconBytes.Length);
$iconImage       = [System.Drawing.Image]::FromStream($stream, $true)
$Form.Icon       = [System.Drawing.Icon]::FromHandle((New-Object System.Drawing.Bitmap -Argument $stream).GetHIcon())

$Groupbox8                       = New-Object system.Windows.Forms.Groupbox
$Groupbox8.height                = 20
$Groupbox8.width                 = 480
$Groupbox8.text                  = "Instance Name"
$Groupbox8.location              = New-Object System.Drawing.Point(8,0)
$Groupbox8.Font                  = New-Object System.Drawing.Font('Microsoft Sans Serif',10) 
$Groupbox8.Anchor = 'Top,Left'
$Groupbox8.AutoSize = 'GrowAndShrink'

$TextBox1                        = New-Object system.Windows.Forms.TextBox
$TextBox1.multiline              = $false
$TextBox1.width                  = 250
$TextBox1.height                 = 25
$TextBox1.location               = New-Object System.Drawing.Point(5,24)
$TextBox1.Font                   = 'Microsoft Sans Serif,10'
$TextBox1.Autosize               = $false
if(!($Edit)){$TextBox1.text = $((Invoke-RestMethod -UseBasicParsing -Uri "https://random-word-form.herokuapp.com/random/adjective" -TimeoutSec 5)+'-'+(Invoke-RestMethod -UseBasicParsing -Uri "https://random-word-form.herokuapp.com/random/noun" -TimeoutSec 5) -join '')}

$Groupbox8.Controls.AddRange(@($TextBox1))

$Groupbox1                       = New-Object system.Windows.Forms.Groupbox
$Groupbox1.height                = 20
$Groupbox1.width                 = 480
$Groupbox1.text                  = "Reigon"
$Groupbox1.location              = New-Object System.Drawing.Point(8,70)
$Groupbox1.Font                  = New-Object System.Drawing.Font('Microsoft Sans Serif',10) 
$Groupbox1.Anchor = 'Top,Left'
$Groupbox1.AutoSize = 'GrowAndShrink'

$ComboBox1                       = New-Object system.Windows.Forms.ComboBox
$ComboBox1.width                 = 250
$ComboBox1.height                = 10
$ComboBox1.location              = New-Object System.Drawing.Point(5,0)
$ComboBox1.Font                  = New-Object System.Drawing.Font('Microsoft Sans Serif',10)
$ComboBox1.Anchor = 'Left'
$ComboBox1.AutoSize = $true
$global:HW.reigon | sort -Unique | ForEach-Object {[void] $comboBox1.Items.Add($_)}
$comboBox1.text                  = "Reigon"
$combobox1.DropDownStyle         = 'DropDownList'

$Groupbox1.controls.AddRange(@($ComboBox1))

$Groupbox2                       = New-Object system.Windows.Forms.Groupbox
$Groupbox2.height                = 100
$Groupbox2.width                 = 480
$Groupbox2.text                  = "Operating System Image"
$Groupbox2.location              = New-Object System.Drawing.Point(8,140)
$Groupbox2.Font                  = New-Object System.Drawing.Font('Microsoft Sans Serif',10) 
$Groupbox2.Anchor = 'Top,Left'
$Groupbox2.AutoSize = 'GrowAndShrink'

$ComboBox2                       = New-Object system.Windows.Forms.ComboBox
$ComboBox2.width                 = 250
$ComboBox2.height                = 10
$ComboBox2.location              = New-Object System.Drawing.Point(5,50)
$ComboBox2.Font                  = New-Object System.Drawing.Font('Microsoft Sans Serif',8)
$ComboBox2.Anchor = 'Left'
$ComboBox2.AutoSize = $true
$comboBox2.text                  = "Operating System"
$combobox2.DropDownStyle         = 'DropDownList'
$Combobox2.Add_SelectedValueChanged(
    {
        if($ComboBox2.SelectedItem -like 'Win*')
            {
                $CheckBox3.Enabled = $true
                $CheckBox3.Refresh()
            }

        Else
            {
                $CheckBox3.Enabled = $false
                $CheckBox3.Refresh()
            }

        if($RadioButton6.Checked -eq $true)
            {
                $Size = ($private.items | where {$_.metadata.name -eq $($ComboBox2.SelectedItem)}).status.capacity.storage.trimend('Gi') | select -First 1
                $NumericUpDown2.Minimum = $Size
                $NumericUpDown2.Value = $Size
                $Combobox4.Items.Clear()                
            }
        if($RadioButton5.Checked -eq $true)
            {
                $Size = ($pvc.items | where {$_.metadata.labels.'images.coreweave.cloud/name' -eq $($ComboBox2.SelectedItem -Replace ' ','_')}).status.capacity.storage.trimend('Gi')[0]
                $NumericUpDown2.Minimum = $Size
                $NumericUpDown2.Value = $Size
                $Combobox4.Items.Clear()
                (($pvc.items | where  {$_.metadata.labels.'images.coreweave.cloud/name' -eq $($ComboBox2.SelectedItem -Replace ' ','_')}).metadata.labels.'images.coreweave.cloud/features' | sort -Unique) | ForEach-Object {[void] $comboBox4.Items.Add($_)}
                $combobox4.SelectedIndex = 0
                
            }
    })

$RadioButton5                    = New-Object system.Windows.Forms.RadioButton
$RadioButton5.text               = "CoreWeave"
$RadioButton5.AutoSize           = $true
$RadioButton5.width              = 0
$RadioButton5.height             = 0
$RadioButton5.location           = New-Object System.Drawing.Point(10,20)
$RadioButton5.Font               = New-Object System.Drawing.Font('Microsoft Sans Serif',10)
$RadioButton5.Anchor = 'Top,Left'
$RadioButton5.AutoSize = 'GrowAndShrink'
$RadioButton5.Add_CheckedChanged(
    {
        if($RadioButton5.Checked -eq $true)
            {
                $combobox2.items.Clear()
                $pvc.items.metadata.labels.'images.coreweave.cloud/name' -Replace '_',' ' | sort -Unique | ForEach-Object {[void] $comboBox2.Items.Add($_)}
            }
    
    })
$RadioButton5.Checked = $true

$RadioButton6                    = New-Object system.Windows.Forms.RadioButton
$RadioButton6.text               = "Private"
$RadioButton6.AutoSize           = $true
$RadioButton6.width              = 0
$RadioButton6.height             = 0
$RadioButton6.location           = New-Object System.Drawing.Point(150,20)
$RadioButton6.Font               = New-Object System.Drawing.Font('Microsoft Sans Serif',10)
$RadioButton6.Anchor = 'Top,Left'
$RadioButton6.AutoSize = 'GrowAndShrink'
$RadioButton6.Add_CheckedChanged(
    {
        if($RadioButton6.Checked -eq $true)
            {
                $combobox2.items.Clear()
                ($private.items | where {$_.spec.volumeMode -eq 'block'}).metadata.name | ForEach-Object {[void] $comboBox2.Items.Add($_)}
            }
    })

$ComboBox4                       = New-Object system.Windows.Forms.ComboBox
$ComboBox4.width                 = 200
$ComboBox4.height                = 10
$ComboBox4.location              = New-Object System.Drawing.Point(270,50)
$ComboBox4.Font                  = New-Object System.Drawing.Font('Microsoft Sans Serif',8)
$ComboBox4.Anchor = 'Right'
$ComboBox4.AutoSize = $true
$comboBox4.text                  = "Features"
$combobox4.DropDownStyle         = 'DropDownList'

$Groupbox2.controls.AddRange(@($ComboBox2,$RadioButton5,$RadioButton6,$combobox4))

$Groupbox10                       = New-Object system.Windows.Forms.Groupbox
$Groupbox10.height                = 58
$Groupbox10.width                 = 60
$Groupbox10.text                  = "GPUs"
$Groupbox10.location              = New-Object System.Drawing.Point(270,18)
$Groupbox10.Font                  = New-Object System.Drawing.Font('Microsoft Sans Serif',10)
$Groupbox10.Anchor = 'Top,Left'
$Groupbox10.AutoSize = $false

$NumericUpDown1 = New-Object 'System.Windows.Forms.NumericUpDown'
$NumericUpDown1.Minimum = 1
$NumericUpDown1.Maximum = 8
$NumericUpDown1.height                = 50
$NumericUpDown1.width                 = 50
$NumericUpDown1.location              = New-Object System.Drawing.Point(5,20)
$NumericUpDown1.Font                  = New-Object System.Drawing.Font('Microsoft Sans Serif',10)
$NumericUpDown1.Anchor = 'Top,Left'
$NumericUpDown1.AutoSize = 'GrowAndShrink'

$Groupbox10.controls.AddRange(@($NumericUpDown1))

$Groupbox3                       = New-Object system.Windows.Forms.Groupbox
$Groupbox3.height                = 100
$Groupbox3.width                 = 480
$Groupbox3.text                  = "Hardware"
$Groupbox3.location              = New-Object System.Drawing.Point(8,240)
$Groupbox3.Font                  = New-Object System.Drawing.Font('Microsoft Sans Serif',10)
$groupbox3.Anchor = 'Top,Left' 
$Groupbox3.AutoSize = 'GrowAndShrink'

$ComboBox3                       = New-Object system.Windows.Forms.ComboBox
$ComboBox3.width                 = 250
$ComboBox3.height                = 10
$ComboBox3.location              = New-Object System.Drawing.Point(5,50)
$ComboBox3.Font                  = New-Object System.Drawing.Font('Microsoft Sans Serif',10)
$ComboBox3.Anchor = 'Left'
$ComboBox3.AutoSize = $true
$comboBox3.text                  = "Hardware"
$combobox3.DropDownStyle         = 'DropDownList'

$RadioButton1                    = New-Object system.Windows.Forms.RadioButton
$RadioButton1.text               = "CPU Instance"
$RadioButton1.AutoSize           = $true
$RadioButton1.width              = 104
$RadioButton1.height             = 20
$RadioButton1.location           = New-Object System.Drawing.Point(5,20)
$RadioButton1.Font               = New-Object System.Drawing.Font('Microsoft Sans Serif',10)
$RadioButton1.Anchor = 'Top,Left'
$RadioButton1.AutoSize = 'GrowAndShrink'
$RadioButton1.Add_CheckedChanged(
    {
        if($RadioButton1.Checked -eq $true)
            {
                $Combobox3.Items.Clear()
                ($global:HW | where {$_.Class -eq 'CPU' -and $_.CPU -ne ''}).CPU | sort -Unique | ForEach-Object {[void] $comboBox3.Items.Add($_)}
                #$Label1.Enabled = $false
                $NumericUpDown1.Enabled = $false
                $NumericUpDown1.Refresh()
                $Combobox3.Refresh()
                #$Label1.Refresh()
                
            }

    
    })

$RadioButton2                    = New-Object system.Windows.Forms.RadioButton
$RadioButton2.text               = "GPU Instance"
$RadioButton2.AutoSize           = $true
$RadioButton2.width              = 104
$RadioButton2.height             = 20
$RadioButton2.location           = New-Object System.Drawing.Point(130,20)
$RadioButton2.Font               = New-Object System.Drawing.Font('Microsoft Sans Serif',10)
$RadioButton2.Anchor = 'Top,Left'
$RadioButton2.AutoSize = 'GrowAndShrink'
$RadioButton2.Add_CheckedChanged(
    {
        if($RadioButton2.Checked -eq $true)
            {
                $Combobox3.Items.Clear()
                $global:HW.GPU | sort -Unique | where {$_ -ne ''}| ForEach-Object {[void] $comboBox3.Items.Add($_)}
                #$Label1.Enabled = $true
                $NumericUpDown1.Enabled = $true
                $Combobox3.Refresh()
                #$Label1.Refresh()
                $NumericUpDown1.Refresh()
            }
    })
$Radiobutton2.Checked = $true

$Groupbox11                       = New-Object system.Windows.Forms.Groupbox
$Groupbox11.height                = 58
$Groupbox11.width                 = 65
$Groupbox11.text                  = "vCPUs"
$Groupbox11.location              = New-Object System.Drawing.Point(335,18)
$Groupbox11.Font                  = New-Object System.Drawing.Font('Microsoft Sans Serif',10)
$Groupbox11.Anchor = 'Top,Left'
$Groupbox11.AutoSize = $false

$NumericUpDown3 = New-Object 'System.Windows.Forms.NumericUpDown'
$NumericUpDown3.Minimum = 1
$NumericUpDown3.Maximum = 96
$NumericUpDown3.height                = 50
$NumericUpDown3.width                 = 50
$NumericUpDown3.location              = New-Object System.Drawing.Point(5,20)
$NumericUpDown3.Font                  = New-Object System.Drawing.Font('Microsoft Sans Serif',10)
$NumericUpDown3.Anchor = 'Top,Left'
$NumericUpDown3.AutoSize = 'GrowAndShrink'

$Groupbox11.controls.AddRange(@($NumericUpDown3))

$Groupbox12                       = New-Object system.Windows.Forms.Groupbox
$Groupbox12.height                = 58
$Groupbox12.width                 = 60
$Groupbox12.text                  = "RAM"
$Groupbox12.location              = New-Object System.Drawing.Point(405,18)
$Groupbox12.Font                  = New-Object System.Drawing.Font('Microsoft Sans Serif',10)
$Groupbox12.Anchor = 'Top,Left'
$Groupbox12.AutoSize = $false

$NumericUpDown4 = New-Object 'System.Windows.Forms.NumericUpDown'
$NumericUpDown4.Minimum = 2
$NumericUpDown4.Maximum = 1000
$NumericUpDown4.height                = 50
$NumericUpDown4.width                 = 50
$NumericUpDown4.location              = New-Object System.Drawing.Point(5,20)
$NumericUpDown4.Font                  = New-Object System.Drawing.Font('Microsoft Sans Serif',10)
$NumericUpDown4.Anchor = 'Top,Left'
$NumericUpDown4.AutoSize = $false

$Groupbox12.controls.AddRange(@($NumericUpDown4))

$Groupbox3.controls.AddRange(@($RadioButton1,$RadioButton2,$ComboBox3,$Groupbox10,$Groupbox11,$Groupbox12))

$Groupbox4                       = New-Object system.Windows.Forms.Groupbox
$Groupbox4.height                = 20
$Groupbox4.width                 = 235
$Groupbox4.text                  = "Root Storage (Gi) "
$Groupbox4.location              = New-Object System.Drawing.Point(8,340)
$Groupbox4.Font                  = New-Object System.Drawing.Font('Microsoft Sans Serif',10)
$Groupbox4.Anchor = 'Top,Left'
$Groupbox4.AutoSize = 'GrowAndShrink'

$NumericUpDown2 = New-Object 'System.Windows.Forms.NumericUpDown'
$NumericUpDown2.height                = 0
$NumericUpDown2.width                 = 70
$NumericUpDown2.location              = New-Object System.Drawing.Point(5,25)
$NumericUpDown2.Font                  = New-Object System.Drawing.Font('Microsoft Sans Serif',10)
$NumericUpDown2.Anchor = 'Top,Left'
$NumericUpDown2.AutoSize = 'GrowAndShrink'
$NumericUpDown2.Maximum = 100000

$Groupbox4.Controls.AddRange(@($NumericUpDown2))

$Groupbox9                       = New-Object system.Windows.Forms.Groupbox
$Groupbox9.height                = 70
$Groupbox9.width                 = 235
$Groupbox9.text                  = "Network"
$Groupbox9.location              = New-Object System.Drawing.Point(253,340)
$Groupbox9.Font                  = New-Object System.Drawing.Font('Microsoft Sans Serif',10)
$Groupbox9.Anchor = 'Top,Left'
$Groupbox9.AutoSize = $false

$RadioButton7                    = New-Object system.Windows.Forms.RadioButton
$RadioButton7.text               = "Public"
$RadioButton7.AutoSize           = $true
$RadioButton7.width              = 104
$RadioButton7.height             = 0
$RadioButton7.location           = New-Object System.Drawing.Point(10,15)
$RadioButton7.Font               = New-Object System.Drawing.Font('Microsoft Sans Serif',10)
$RadioButton7.Anchor = 'Top,Left'
$RadioButton7.AutoSize = 'GrowAndShrink'
$RadioButton7.Checked = $true

$RadioButton8                    = New-Object system.Windows.Forms.RadioButton
$RadioButton8.text               = "Internal"
$RadioButton8.AutoSize           = $true
$RadioButton8.width              = 104
$RadioButton8.height             = 0
$RadioButton8.location           = New-Object System.Drawing.Point(10,40)
$RadioButton8.Font               = New-Object System.Drawing.Font('Microsoft Sans Serif',10)
$RadioButton8.Anchor = 'Top,Left'
$RadioButton8.AutoSize = 'GrowAndShrink'


$Groupbox9.Controls.AddRange(@($RadioButton7,$RadioButton8))

$Groupbox5                       = New-Object system.Windows.Forms.Groupbox
$Groupbox5.height                = 100
$Groupbox5.width                 = 480
$Groupbox5.text                  = "Shared Filesystem"
$Groupbox5.location              = New-Object System.Drawing.Point(8,410)
$Groupbox5.Font                  = New-Object System.Drawing.Font('Microsoft Sans Serif',10)
$Groupbox5.Anchor = 'Top,Left'
$Groupbox5.AutoSize = $false

$ListBox1                        = New-Object system.Windows.Forms.ListBox
$ListBox1.text                   = "listBox"
$ListBox1.width                  = 250
$ListBox1.height                 = 79
$ListBox1.location               = New-Object System.Drawing.Point(5,18)
($private.items | where {$_.spec.accessmodes -eq 'ReadWriteMany'}).metadata.name | ForEach-Object {[void] $ListBox1.Items.Add($_)}
$ListBox1.SelectionMode = 'MultiExtended'
$ListBox1.ScrollAlwaysVisible = $true
$ListBox1.HorizontalScrollbar = $true
$ListBox1.Font                  = New-Object System.Drawing.Font('Microsoft Sans Serif',9)


$CheckBox1                       = New-Object system.Windows.Forms.CheckBox
$CheckBox1.text                  = "Enabled"
$CheckBox1.AutoSize              = $false
$CheckBox1.width                 = 100
$CheckBox1.height                = 20
$CheckBox1.location              = New-Object System.Drawing.Point(260,17)
$CheckBox1.Font                  = 'Microsoft Sans Serif,10'
$CheckBox1.CheckState = 'Checked'
$CheckBox1.Add_CheckStateChanged(
    {
        if($CheckBox1.CheckState -eq 'Checked')
            {
                $ListBox1.Enabled = $true
                $ListBox1.Refresh()
            }

        if($CheckBox1.CheckState -eq 'UnChecked')
            {
                $ListBox1.ClearSelected()
                $ListBox1.Enabled = $false
                $ListBox1.Refresh()
            }
    })
$CheckBox1.CheckState            = 'UnChecked'

$Groupbox5.Controls.AddRange(@($CheckBox1,$ListBox1))

$Groupbox6                       = New-Object system.Windows.Forms.Groupbox
$Groupbox6.height                = 160
$Groupbox6.width                 = 480
$Groupbox6.text                  = "VM State"
$Groupbox6.location              = New-Object System.Drawing.Point(8,510)
$Groupbox6.Font                  = New-Object System.Drawing.Font('Microsoft Sans Serif',10)
$Groupbox6.Anchor = 'Top,Left'
$Groupbox6.AutoSize = $false

$RadioButton3                    = New-Object system.Windows.Forms.RadioButton
$RadioButton3.text               = "Running"
$RadioButton3.AutoSize           = $true
$RadioButton3.width              = 104
$RadioButton3.height             = 20
$RadioButton3.location           = New-Object System.Drawing.Point(5,40)
$RadioButton3.Font               = New-Object System.Drawing.Font('Microsoft Sans Serif',10)
$RadioButton3.Anchor = 'Top,Left'
$RadioButton3.AutoSize = 'GrowAndShrink'
$RadioButton3.Add_CheckedChanged(
    {
        if($RadioButton3.Checked -eq $true)
            {
            }
    
    })
$RadioButton3.Checked = $true

$RadioButton4                    = New-Object system.Windows.Forms.RadioButton
$RadioButton4.text               = "Not Running"
$RadioButton4.AutoSize           = $true
$RadioButton4.width              = 104
$RadioButton4.height             = 20
$RadioButton4.location           = New-Object System.Drawing.Point(130,40)
$RadioButton4.Font               = New-Object System.Drawing.Font('Microsoft Sans Serif',10)
$RadioButton4.Anchor = 'Top,Left'
$RadioButton4.AutoSize = 'GrowAndShrink'
$RadioButton4.Add_CheckedChanged(
    {
        if($RadioButton4.Checked -eq $true)
            {
            }
    })

$CheckBox2                       = New-Object system.Windows.Forms.CheckBox
$CheckBox2.text                  = "Terminate On Shutdown"
$CheckBox2.AutoSize              = $false
$CheckBox2.width                 = 200
$CheckBox2.height                = 20
$CheckBox2.location              = New-Object System.Drawing.Point(5,20)
$CheckBox2.Font                  = 'Microsoft Sans Serif,10'

$NumericUpDown5 = New-Object 'System.Windows.Forms.NumericUpDown'
$NumericUpDown5.Minimum = 1
$NumericUpDown5.height                = 50
$NumericUpDown5.width                 = 50
$NumericUpDown5.location              = New-Object System.Drawing.Point(5,90)
$NumericUpDown5.Font                  = New-Object System.Drawing.Font('Microsoft Sans Serif',10)
$NumericUpDown5.Anchor = 'Top,Left'
$NumericUpDown5.AutoSize = 'GrowAndShrink'

$Label2                          = New-Object system.Windows.Forms.Label
$Label2.text                     = "Idle Hours"
$Label2.AutoSize                 = $true
$Label2.width                    = 25
$Label2.height                   = 10
$Label2.location                 = New-Object System.Drawing.Point(60,95)
$Label2.Font                     = 'Microsoft Sans Serif,10'

$CheckBox3                       = New-Object system.Windows.Forms.CheckBox
$CheckBox3.text                  = "Shutoff VM On Idle"
$CheckBox3.AutoSize              = $false
$CheckBox3.width                 = 200
$CheckBox3.height                = 20
$CheckBox3.location              = New-Object System.Drawing.Point(5,65)
$CheckBox3.Font                  = 'Microsoft Sans Serif,10'
$CheckBox3.CheckState = 'Checked'
$CheckBox3.Add_CheckStateChanged(
    {
        if($CheckBox3.CheckState -eq 'Checked')
            {
                $Checkbox2.Checked = $true
                $Checkbox2.Refresh()
                $NumericUpDown5.Enabled = $true
                $NumericUpDown5.Refresh()
                $Label2.Enabled = $true
                $Label2.Refresh()
            }

        if($CheckBox3.CheckState -eq 'UnChecked')
            {
                $Checkbox2.Checked = $false
                $Checkbox2.Refresh()
                $NumericUpDown5.Enabled = $false
                $NumericUpDown5.Refresh()
                $Label2.Enabled = $false
                $Label2.Refresh()
            }
    })
$CheckBox3.CheckState            = 'UnChecked'
$CheckBox3.Enabled = $false

$CheckBox2.CheckState = 'Checked'
$CheckBox2.Add_CheckStateChanged(
    {
        if($CheckBox2.CheckState -eq 'Checked')
            {
                $RadioButton3.Checked = $true
                $RadioButton3.Enabled = $false
                $RadioButton4.Checked = $false
                $RadioButton4.Enabled = $false
                $RadioButton3.Refresh()
                $RadioButton4.Refresh()
            }

        if($CheckBox2.CheckState -eq 'UnChecked')
            {
                $RadioButton3.Checked = $true
                $RadioButton3.Enabled = $true
                $RadioButton4.Checked = $false
                $RadioButton4.Enabled = $true
                $Checkbox3.Checked = $false
                $Checkbox3.Refresh()
                $RadioButton3.Refresh()
                $RadioButton4.Refresh()
            }
    })
$CheckBox2.CheckState            = 'UnChecked'

$Groupbox6.Controls.AddRange(@($Checkbox3,$CheckBox2,$Radiobutton3,$RadioButton4,$NumericUpDown5,$Label2))

$Groupbox7                       = New-Object system.Windows.Forms.Groupbox
$Groupbox7.height                = 75
$Groupbox7.width                 = 480
$Groupbox7.text                  = "User Account"
$Groupbox7.location              = New-Object System.Drawing.Point(8,670)
$Groupbox7.Font                  = New-Object System.Drawing.Font('Microsoft Sans Serif',10)
$Groupbox7.Anchor = 'Top,Left'
$Groupbox7.AutoSize = 'GrowAndShrink'

$Button1                         = New-Object system.Windows.Forms.Button
$Button1.text                    = "Enter`nAccount Credentials"
$Button1.width                   = 140
$Button1.height                  = 40
$Button1.location                = New-Object System.Drawing.Point(5,20)
$Button1.Font                    = New-Object System.Drawing.Font('Microsoft Sans Serif',10)
$Button1.Anchor = 'Top,Bottom,Left,Right'
$Button1.AutoSize = $true
$Button1.AutoSizeMode = 'GrowAndShrink'
$Button1.Add_Click({$global:cred = $Host.UI.PromptForCredential("VDI User Account Information","Enter your desired credentials:",$null,$null)})

$Groupbox7.Controls.AddRange(@($Button1))

$Button2                         = New-Object system.Windows.Forms.Button
$Button2.text                    = "Deploy"
$Button2.width                   = 70
$Button2.height                  = 40
$Button2.location                = New-Object System.Drawing.Point(205,760)
$Button2.Font                    = New-Object System.Drawing.Font('Microsoft Sans Serif',12)
$Button2.Anchor = 'Top,Bottom,Left,Right'
$Button2.AutoSize = $true
$Button2.AutoSizeMode = 'GrowAndShrink'
$Button2.Add_Click(
    {
@"
apiVersion: virtualservers.coreweave.com/v1alpha1
kind: VirtualServer
metadata:
  name: $($TextBox1.text)
spec:
  region: $($ComboBox1.Text)
  os:
    type: $(if($ComboBox2.text -like '*win*'){'windows'};if($combobox2.Text -notlike '*win*'){'linux'})
  resources:
$(if($RadioButton2.Checked -eq $true)
{
"    gpu:
      type: $($combobox3.text)
      count: $($numericupdown1.value)
    cpu:
      count: $($NumericUpDown3.value)"}
if($RadioButton1.Checked -eq $true)
{
"    cpu:
      type: $($combobox3.text)
      count: $($NumericUpDown3.value)"})
    memory: $($numericupdown4.value)Gi
  storage:
    root:
      size: $($numericupdown2.value)Gi
      storageClassName: block-nvme-$($ComboBox1.text.ToLower())
      source:
$(if($RadioButton5.Checked -eq $true -and $Edit -ne $true)
{
"        pvc:
          namespace: vd-images
          name: $(($pvc.items | where {($_.metadata.labels.'images.coreweave.cloud/name' -eq $($ComboBox2.SelectedItem  -Replace ' ','_')) -and ($($_.metadata.labels.'images.coreweave.cloud/features') -eq $($combobox4.selecteditem))}).metadata.name | where{$_ -like "*$($ComboBox1.Text)"})"}
if($RadioButton5.Checked -eq $true -and $Edit -eq $true)
{
"        pvc:
          namespace: vd-images
          name: $($inputobject.spec.storage.root.source.pvc.name)"}
if($radiobutton6.Checked -eq $true -and $Edit -ne $true)
{
"        pvc:
          namespace: $($global:namespace)
          name: $($combobox2.text)"}
if($radiobutton6.Checked -eq $true -and $Edit -eq $true)
{
"        pvc:
          namespace: $($global:namespace)
          name: $($inputobject.spec.storage.root.source.pvc.name)"})
$(if($CheckBox1.Checked -eq $true)
{"    filesystems:$($ListBox1.SelectedItems | %{
"
      - name: $($_)
        spec:
          persistentVolumeClaim:
            claimName: $($_)"})"})
  users:
    - username: $($cred.UserName)
      password: $($cred.GetNetworkCredential().Password)
  network:
    public: $(if($RadioButton7.Checked -eq $true){'true'};if($RadioButton8.Checked -eq $true){'false'})
    directAttachLoadBalancerIP: true
  initializeRunning: $(if($RadioButton3.Checked -eq $true){'true'};if($RadioButton4.Checked -eq $true){'false'})
"@ -replace '\n\r','' | out-file $env:temp\deploy.yaml
        $Stdout = iex "$env:ProgramData\k8s\kubectl.exe apply -f $($env:temp)\deploy.yaml -n $global:Namespace" -ErrorVariable stderr -ErrorAction SilentlyContinue
        $stdout += $stderr
        if($stdout | select-string -Pattern Error){[System.Windows.Forms.MessageBox]::Show("$($stdout)",'CoreWeave Virtual Machine Manager','OK','Error')}
        Else
            {
                if($Edit)
                    {
                        if(!($numericupdown2.value -match ($private.items | where {$_.metadata.name -eq $vs.metadata.name}).spec.resources.requests.storage.trimend('Gi')))
                            {
                                $VSPVC = ($private.items | where {$_.metadata.name -eq $vs.metadata.name})
                                $VSPVC.spec.resources.requests.storage = $($numericupdown2.value.tostring()+'Gi')
                                $VSPVC | ConvertTo-Json -Depth 10 | out-file $env:temp\deploy.json
                                $out = iex "$env:ProgramData\k8s\kubectl.exe apply -f $($env:temp)\deploy.json -n $global:Namespace" -ErrorVariable err -ErrorAction SilentlyContinue
                                $out += $err
                                if($out | select-string -Pattern Error){[System.Windows.Forms.MessageBox]::Show("$($out)",'CoreWeave Virtual Machine Manager','OK','Error')}
                                Else{[System.Windows.Forms.MessageBox]::Show("$($out)",'CoreWeave Virtual Machine Manager','OK','Information')}
                                [GC]::Collect()
                                Remove-Item "$env:temp\deploy.json" -Force
                            }
                    }
                [System.Windows.Forms.MessageBox]::Show("$($stdout)",'CoreWeave Virtual Machine Manager','OK','Information')
            }
        [GC]::Collect()
        Remove-Item "$($env:temp)\deploy.yaml" -Force
    })

$Form.controls.AddRange(@($Groupbox3,$Groupbox2,$Groupbox1,$Groupbox4,$Groupbox5,$Groupbox6,$GroupBox7,$Groupbox8,$Groupbox9,$Button2))

if($Edit)
    {
        $Groupbox8.Enabled = $false
        $Groupbox2.Enabled = $false
        $Groupbox7.Enabled = $false
        $Groupbox6.Enabled = $false
        $TextBox1.text = $InputObject.metadata.name
        $Combobox1.SelectedItem = $InputObject.spec.region
        if($InputObject.spec.resources.cpu)
            {
                $RadioButton1.Checked = $true
                $combobox3.selecteditem = $InputObject.spec.resources.cpu.type
                $NumericUpDown3.value = $InputObject.spec.resources.cpu.count
            }
        if($InputObject.spec.resources.gpu)
            {
                $RadioButton2.Checked = $true
                $combobox3.selecteditem = $InputObject.spec.resources.gpu.type
                $numericupdown1.value = $InputObject.spec.resources.gpu.count
                $NumericUpDown3.value = $InputObject.spec.resources.cpu.count
            }
        $numericupdown4.value = $InputObject.spec.resources.memory.trimend('Gi')
        $radiobutton6.Checked -eq $true
        $combobox2.SelectedItem = $InputObject.metadata.name
        if($InputObject.spec.storage.filesystems)
            {
                $CheckBox1.Checked = $true
                $InputObject.spec.storage.filesystems.name | %{$ListBox1.SetSelected($($ListBox1.Items.IndexOf($_)),$true)}
            }

        if($InputObject.spec.network.public -eq $true){$RadioButton7.Checked = $true}
        Elseif($InputObject.spec.network.public -eq $false){$RadioButton8.Checked = $true}

        $numericupdown2.value = $InputObject.spec.storage.root.size.trimend('Gi')
        if($InputObject.spec.storage.root.source.pvc.namespace -eq 'vd-images'){$RadioButton5.Checked = $true}
        Elseif($InputObject.spec.storage.root.source.pvc.namespace -eq $global:Namespace){$RadioButton6.Checked = $true}

        $username = $InputObject.spec.users.username
        $password = $InputObject.spec.users.password
        [securestring]$secStringPassword = ConvertTo-SecureString $password -AsPlainText -Force
        [pscredential]$cred = New-Object System.Management.Automation.PSCredential ($username, $secStringPassword)

        if($InputObject.spec.initializeRunning -eq $true){$RadioButton3.Checked = $true}
        Elseif($InputObject.spec.initializeRunning -eq $false){$Radiobutton4.Checked = $true}
    }

[void]$Form.ShowDialog()
}


[void]$Form.ShowDialog()
